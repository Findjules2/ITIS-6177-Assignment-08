const express = require('express');
const cors = require('cors');
const app = express();
const port = 3001;
app.use(express.json())

// const whitelist = ['http:example1.com', 'http://example2.com'];

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

const mariadb = require('mariadb');
const pool = mariadb.createPool({
    host: 'localhost',
    user: 'root',
    password: 'root',
    database: 'sample',
    port: 3306,
    connectionLimit: 5
})

const options = {
  swaggerDefinition: {
      info: {
          title: 'Agent Location API',
          version: '1.0.0',
          description: 'Agent with Location API autogenerated by '
      },
      host: 'localhost:3001',
      basePath: '/',
  },
  apis: ['./server.js'],
};
const specs = swaggerJsdoc(options);

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());

/**
 * @swagger
 * /agents:
 *    get:
 *      description: Return all agents
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object agents containing array of agent object wtih all info.
 */

app.get('/agents', (req, res ) => {
     //connect to db
    pool.getConnection()
    .then(conn => {
        //perform request
        conn.query("SELECT * FROM agents")
        //define the header
        .then((rows) => {
            //send a res.json(rows)
            res.json(rows);
            conn.end();
        })
          .catch(err => {
            console.log(err);
            conn.end();
          })
    })
});

/**
 * @swagger
 * /agents:
 *    post:
 *      description: Add new agent
 *      produces:
 *          - application/json
 *      parameters:
 *          - in: body
 *            name: body
 *            description: json body for agent data to add new agent
 *            required: true
 *            schema:
 *              type: object
 *              properties:
 *                agent_code:
 *                  type: string
 *                agent_name:
 *                  type: string
 *                working_area:
 *                  type: string
 *                commission:
 *                  type: string
 *                phone_no:
 *                  type: string
 *                country:
 *                  type: string
 *      responses:
 *          200:
 *              description: A status message stating agent added
 *          400:
 *              description: Status message states error of duplicate agent code.
 */

app.post('/agents', (req, res ) => {

let {agent_code, agent_name, working_area, commission, phone_no, country} = req.body;

pool.getConnection()
.then(conn => {
  //perform request
  const queryString = `INSERT INTO agents (AGENT_CODE, AGENT_NAME, WORKING_AREA, COMMISSION, PHONE_NO, COUNTRY) VALUES ("${agent_code}", "${agent_name}", "${working_area}", "${commission}", "${phone_no}", "${country}")`;
  conn.query(queryString)
  //define the header
  .then((rows) => {
      //send a res.json(rows)
      console.log(rows);
      res.json({"message": "New Agent Added"});
      conn.end();
  })
    .catch(err => {
      console.log(err);
      res.status(400)
      res.json({"Error": "Duplicate Agent Code"})
      conn.end();
    })
})


  //get agents to make sure no duplicate agent id

  //If agent id is available then post new agent
  console.log(agent_code, agent_name, working_area, commission, phone_no, country);


});

app.put('/agents/:agent_code', (req, res ) => {

  const agent_code = req.params.agent_code;
  const { agent_name, working_area, commission, phone_no, country} = req.body;
  const queryString = `UPDATE agents SET AGENT_NAME = "${agent_name}", WORKING_AREA = "${working_area}", COMMISSION = "${commission}", PHONE_NO = "${phone_no}", COUNTRY = "${country}" WHERE AGENT_CODE = "${agent_code}"`;
  
  pool.getConnection()
  .then(conn => {
    //perform request
    conn.query(queryString)
    //define the header
    .then((rows) => {
        //send a res.json(rows)
        console.log(rows);
        res.json({"message": "Agent Updated"});
        conn.end();
    })
      .catch(err => {
        console.log(err);
        res.status(400)
        res.json({"Error": "Agent ID does not exist"})
        conn.end();
      })
  })
  });

  app.patch('/agents/names/:agent_code', (req, res ) => {

    const agent_code = req.params.agent_code;
    const {agent_name} = req.body;
    const queryString = `UPDATE agents SET AGENT_NAME = "${agent_name}" WHERE AGENT_CODE = "${agent_code}"`;
    
    pool.getConnection()
    .then(conn => {
      //perform request
      conn.query(queryString)
      //define the header
      .then((rows) => {
          //send a res.json(rows)
          console.log(rows);
          res.json({"message": "Agent Updated"});
          conn.end();
      })
        .catch(err => {
          console.log(err);
          res.status(400)
          res.json({"Error": "Agent ID does not exist"})
          conn.end();
        })
    })
    });

    app.delete('/agents/:agent_code', (req, res ) => {

      const agent_code = req.params.agent_code;
      const queryString = `DELETE FROM agents WHERE AGENT_CODE = "${agent_code}"`;
      console.log(agent_code);
      pool.getConnection()
      .then(conn => {
        //perform request
        conn.query(queryString)
        //define the header
        .then((rows) => {
            //send a res.json(rows)
            console.log(rows);
            res.json({"message": "Agent Deleted"});
            conn.end();
        })
          .catch(err => {
            console.log(err);
            res.status(400)
            res.json({"Error": "Agent ID does not exist"})
            conn.end();
          })
      })
      });


/**
 * @swagger
 * /agents/names:
 *    get:
 *      description: Return all the names of agents
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object names containing array of agent names object.
 */

app.get('/agents/names', (req, res ) => {
    //connect to db
   pool.getConnection()
   .then(conn => {
       //perform request
       conn.query("SELECT AGENT_NAME FROM agents")
       //define the header
       .then((rows) => {
           console.log(rows);
           //send a res.json(rows)
           res.json(rows);
           conn.end();
       })
         .catch(err => {
           console.log(err);
           conn.end();
         })
   })
});

/**
 * @swagger
 * /agents/names:
 *    patch:
 *      description: Correct an agent name and return all the names of agents
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object names containing array of corrected agent names object.
 */

/**
 * @swagger
 * /agents/names:
 *    delete:
 *      description: Delete an agent and return all the remaining names of agents
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object names containing array of reduced agent names object.
 */

/**
 * @swagger
 * /agents/area:
 *    get:
 *      description: Return all the areas that agents work
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object areas containing array of areas or locations agents work.
 */

app.get('/agents/areas', (req, res ) => {
    //connect to db
   pool.getConnection()
   .then(conn => {
       //perform request
       conn.query("SELECT WORKING_AREA FROM agents")
       //define the header
       .then((rows) => {
           console.log(rows);
           //send a res.json(rows)
           res.json(rows);
           conn.end();
       })
         .catch(err => {
           console.log(err);
           conn.end();
         })
   })
});

/**
 * @swagger
 * /customers/id:
 *    put:
 *      description: Update agent id for customer based on customer id
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Object customer is being updated to change agent helping them.
 */

app.listen(port, () => {
    console.log(`Example app listening on http://localhost:${port}`) });
